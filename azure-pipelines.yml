# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: $(AzureConnector)
    backendAzureRmResourceGroupName: 'rg-tf-landing-zone-demo1'
    backendAzureRmStorageAccountName: 'stlandingzonedemo1'
    backendAzureRmContainerName: 'tflandingzonedemocontainer1'
    backendAzureRmKey: 'terraform.tfstate'
  name: 'terraforminit'
  displayName: 'Terrafrom Initialize'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'validate'
  name: 'terraformvalidate'
  displayName: 'Terrafrom Validate'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-var-file=my-variables.tfvars -input=false -out=$(Build.BinariesDirectory)/tfplan'
    environmentServiceNameAzureRM: $(AzureConnector)
  name: 'terraformplan'
  displayName: 'Terrafrom Plan'


- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/tfplan'
    includeRootFolder: false
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
    replaceExistingArchive: true
    displayName: 'Create Plan Artifact'
 
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.BuildId)-tfplan'
    publishLocation: 'Container'
    displayName: 'Publish Plan Artifact' 

# - task: TerraformTaskV2@2
#   inputs:
#     provider: 'azurerm'
#     command: 'destroy'
#     environmentServiceNameAzureRM: $(AzureConnector)

# - task: TerraformTaskV2@2
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     commandOptions: '-input=false'
#     environmentServiceNameAzureRM: $(AzureConnector)